import os
import sys
import pandas as pd
from PyQt5 import QtWidgets, QtCore
from PyQt5.QtWidgets import QDialog, QApplication
from PyQt5.QtCore import QThread, pyqtSignal, QRegExp
from PyQt5.QtGui import QRegExpValidator
from PyQt5 import QtCore, QtWidgets, QtGui
from textblob import TextBlob as tb

global i
i = 0 

happy_emoji = ":-) :) ;) :o) :] :c) :> =] 8) =) :} :^) :-D :D 8-D 8D x-D X-D =-D =D =-3 =3 :-)) :'-) :') >:P :-P :P X-P x-p :-p :p =p :-b :b >:) >;) >:-) <3".split()

sad_emoji = ">:[ :-( :(  :-c :c :-<  :< :-[ :[ :{ ;( :@ >:( :'-( :'( >:/ :-/ :-.  =/ :L =L :S >.<".split()

# text = df['tweet']
# df = df.drop(columns=['id','username','date','time','replies_count','retweets_count','likes_count','language','sentiment','tweet'])
# df = df.drop(columns=['Signal','handySentiment','tweet'])
# df['Signal'] = None
# df['handySentiment'] = None
# df['tweet'] = text


# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'gui.ui'
#
# Created by: PyQt5 UI code generator 5.15.2
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets


class Ui_SentiAnotator140(object):
    def setupUi(self, SentiAnotator140):
        SentiAnotator140.setObjectName("SentiAnotator140")
        SentiAnotator140.resize(603, 359)
        self.gridLayout = QtWidgets.QGridLayout(SentiAnotator140)
        self.gridLayout.setObjectName("gridLayout")
        self.label_4 = QtWidgets.QLabel(SentiAnotator140)
        font = QtGui.QFont()
        font.setFamily("Times New Roman")
        font.setPointSize(12)
        font.setBold(True)
        font.setWeight(75)
        self.label_4.setFont(font)
        self.label_4.setObjectName("label_4")
        self.gridLayout.addWidget(self.label_4, 0, 0, 1, 2)
        self.lineEdit = QtWidgets.QLineEdit(SentiAnotator140)
        self.lineEdit.setObjectName("lineEdit")
        self.gridLayout.addWidget(self.lineEdit, 0, 2, 1, 3)
        self.enter = QtWidgets.QPushButton(SentiAnotator140)
        self.enter.setAcceptDrops(False)
        self.enter.setObjectName("enter")
        self.gridLayout.addWidget(self.enter, 0, 7, 1, 1)
        self.line = QtWidgets.QFrame(SentiAnotator140)
        self.line.setFrameShape(QtWidgets.QFrame.HLine)
        self.line.setFrameShadow(QtWidgets.QFrame.Sunken)
        self.line.setObjectName("line")
        self.gridLayout.addWidget(self.line, 1, 0, 1, 8)
        self.label_3 = QtWidgets.QLabel(SentiAnotator140)
        font = QtGui.QFont()
        font.setFamily("Times New Roman")
        font.setPointSize(12)
        font.setBold(True)
        font.setWeight(75)
        self.label_3.setFont(font)
        self.label_3.setObjectName("label_3")
        self.gridLayout.addWidget(self.label_3, 2, 0, 1, 1)
        self.autoLabel = QtWidgets.QLabel(SentiAnotator140)
        font = QtGui.QFont()
        font.setFamily("Times New Roman")
        font.setPointSize(15)
        font.setBold(True)
        font.setWeight(75)
        self.autoLabel.setFont(font)
        self.autoLabel.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.autoLabel.setText("")
        self.autoLabel.setAlignment(QtCore.Qt.AlignCenter)
        self.autoLabel.setObjectName("autoLabel")
        self.gridLayout.addWidget(self.autoLabel, 2, 1, 1, 1)
        self.emoticon = QtWidgets.QLabel(SentiAnotator140)
        self.emoticon.setEnabled(True)
        self.emoticon.setAutoFillBackground(False)
        self.emoticon.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.emoticon.setText("")
        self.emoticon.setObjectName("emoticon")
        self.gridLayout.addWidget(self.emoticon, 2, 2, 1, 2)
        self.handySentiment = QtWidgets.QLabel(SentiAnotator140)
        font = QtGui.QFont()
        font.setFamily("Times New Roman")
        font.setPointSize(10)
        self.handySentiment.setFont(font)
        self.handySentiment.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.handySentiment.setText("")
        self.handySentiment.setAlignment(QtCore.Qt.AlignCenter)
        self.handySentiment.setObjectName("handySentiment")
        self.gridLayout.addWidget(self.handySentiment, 2, 4, 1, 1)
        self.signalLabel = QtWidgets.QLabel(SentiAnotator140)
        font = QtGui.QFont()
        font.setFamily("Times New Roman")
        font.setPointSize(10)
        self.signalLabel.setFont(font)
        self.signalLabel.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.signalLabel.setText("")
        self.signalLabel.setAlignment(QtCore.Qt.AlignCenter)
        self.signalLabel.setObjectName("signalLabel")
        self.gridLayout.addWidget(self.signalLabel, 2, 5, 1, 1)
        self.text = QtWidgets.QTextBrowser(SentiAnotator140)
        font = QtGui.QFont()
        font.setFamily("Times New Roman")
        font.setPointSize(12)
        self.text.setFont(font)
        self.text.setObjectName("text")
        self.gridLayout.addWidget(self.text, 3, 0, 1, 8)
        self.tweetNumber = QtWidgets.QLineEdit(SentiAnotator140)
        self.tweetNumber.setObjectName("tweetNumber")
        self.gridLayout.addWidget(self.tweetNumber, 4, 0, 1, 3)
        self.displayButton = QtWidgets.QPushButton(SentiAnotator140)
        self.displayButton.setEnabled(False)
        self.displayButton.setObjectName("displayButton")
        self.gridLayout.addWidget(self.displayButton, 4, 3, 1, 1)
        spacerItem = QtWidgets.QSpacerItem(174, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        self.gridLayout.addItem(spacerItem, 4, 4, 1, 2)
        self.previousButton = QtWidgets.QPushButton(SentiAnotator140)
        self.previousButton.setEnabled(False)
        self.previousButton.setObjectName("previousButton")
        self.gridLayout.addWidget(self.previousButton, 4, 6, 1, 1)
        self.nextButton = QtWidgets.QPushButton(SentiAnotator140)
        self.nextButton.setEnabled(False)
        self.nextButton.setObjectName("nextButton")
        self.gridLayout.addWidget(self.nextButton, 4, 7, 1, 1)
        spacerItem1 = QtWidgets.QSpacerItem(500, 15, QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Fixed)
        self.gridLayout.addItem(spacerItem1, 5, 0, 1, 7)
        self.label_2 = QtWidgets.QLabel(SentiAnotator140)
        font = QtGui.QFont()
        font.setFamily("Times New Roman")
        font.setPointSize(12)
        font.setBold(True)
        font.setWeight(75)
        self.label_2.setFont(font)
        self.label_2.setObjectName("label_2")
        self.gridLayout.addWidget(self.label_2, 6, 0, 1, 1)
        self.Resetbutton = QtWidgets.QPushButton(SentiAnotator140)
        self.Resetbutton.setEnabled(False)
        font = QtGui.QFont()
        font.setFamily("Times New Roman")
        font.setPointSize(10)
        font.setBold(True)
        font.setWeight(75)
        self.Resetbutton.setFont(font)
        self.Resetbutton.setObjectName("Resetbutton")
        self.gridLayout.addWidget(self.Resetbutton, 6, 6, 2, 1)
        self.buyLabel = QtWidgets.QPushButton(SentiAnotator140)
        self.buyLabel.setEnabled(False)
        font = QtGui.QFont()
        font.setFamily("Times New Roman")
        font.setPointSize(10)
        font.setBold(True)
        font.setWeight(75)
        self.buyLabel.setFont(font)
        self.buyLabel.setObjectName("buyLabel")
        self.gridLayout.addWidget(self.buyLabel, 6, 7, 1, 1)
        self.label1 = QtWidgets.QPushButton(SentiAnotator140)
        self.label1.setEnabled(False)
        font = QtGui.QFont()
        font.setFamily("Times New Roman")
        font.setPointSize(12)
        font.setBold(True)
        font.setWeight(75)
        self.label1.setFont(font)
        self.label1.setObjectName("label1")
        self.gridLayout.addWidget(self.label1, 7, 0, 1, 1)
        self.label2 = QtWidgets.QPushButton(SentiAnotator140)
        self.label2.setEnabled(False)
        font = QtGui.QFont()
        font.setFamily("Times New Roman")
        font.setPointSize(12)
        font.setBold(True)
        font.setWeight(75)
        self.label2.setFont(font)
        self.label2.setObjectName("label2")
        self.gridLayout.addWidget(self.label2, 7, 1, 1, 2)
        self.label3 = QtWidgets.QPushButton(SentiAnotator140)
        self.label3.setEnabled(False)
        font = QtGui.QFont()
        font.setFamily("Times New Roman")
        font.setPointSize(12)
        font.setBold(True)
        font.setWeight(75)
        self.label3.setFont(font)
        self.label3.setObjectName("label3")
        self.gridLayout.addWidget(self.label3, 7, 3, 1, 1)
        self.label4 = QtWidgets.QPushButton(SentiAnotator140)
        self.label4.setEnabled(False)
        font = QtGui.QFont()
        font.setFamily("Times New Roman")
        font.setPointSize(12)
        font.setBold(True)
        font.setWeight(75)
        self.label4.setFont(font)
        self.label4.setObjectName("label4")
        self.gridLayout.addWidget(self.label4, 7, 4, 1, 1)
        self.label5 = QtWidgets.QPushButton(SentiAnotator140)
        self.label5.setEnabled(False)
        font = QtGui.QFont()
        font.setFamily("Times New Roman")
        font.setPointSize(12)
        font.setBold(True)
        font.setWeight(75)
        self.label5.setFont(font)
        self.label5.setObjectName("label5")
        self.gridLayout.addWidget(self.label5, 7, 5, 1, 1)
        self.sellLabel = QtWidgets.QPushButton(SentiAnotator140)
        self.sellLabel.setEnabled(False)
        font = QtGui.QFont()
        font.setFamily("Times New Roman")
        font.setPointSize(10)
        font.setBold(True)
        font.setWeight(75)
        self.sellLabel.setFont(font)
        self.sellLabel.setObjectName("sellLabel")
        self.gridLayout.addWidget(self.sellLabel, 7, 7, 1, 1)
        spacerItem2 = QtWidgets.QSpacerItem(500, 10, QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Fixed)
        self.gridLayout.addItem(spacerItem2, 8, 0, 1, 7)
        self.finishButton = QtWidgets.QPushButton(SentiAnotator140)
        self.finishButton.setEnabled(False)
        font = QtGui.QFont()
        font.setFamily("Times New Roman")
        font.setPointSize(10)
        font.setBold(True)
        font.setWeight(75)
        self.finishButton.setFont(font)
        self.finishButton.setObjectName("finishButton")
        self.gridLayout.addWidget(self.finishButton, 9, 0, 1, 8)

        self.retranslateUi(SentiAnotator140)
        QtCore.QMetaObject.connectSlotsByName(SentiAnotator140)

    def retranslateUi(self, SentiAnotator140):
        _translate = QtCore.QCoreApplication.translate
        SentiAnotator140.setWindowTitle(_translate("SentiAnotator140", "SentiAnotator140"))
        self.label_4.setText(_translate("SentiAnotator140", "Enter file path"))
        self.enter.setText(_translate("SentiAnotator140", "Enter"))
        self.label_3.setText(_translate("SentiAnotator140", "Labels:"))
        self.tweetNumber.setPlaceholderText(_translate("SentiAnotator140", "Enter tweet\'s number"))
        self.displayButton.setText(_translate("SentiAnotator140", "Display"))
        self.previousButton.setText(_translate("SentiAnotator140", "Previous"))
        self.nextButton.setText(_translate("SentiAnotator140", "Next"))
        self.label_2.setText(_translate("SentiAnotator140", "Labels:"))
        self.Resetbutton.setText(_translate("SentiAnotator140", "Reset"))
        self.buyLabel.setText(_translate("SentiAnotator140", "Buy"))
        self.label1.setText(_translate("SentiAnotator140", "1"))
        self.label2.setText(_translate("SentiAnotator140", "2"))
        self.label3.setText(_translate("SentiAnotator140", "3"))
        self.label4.setText(_translate("SentiAnotator140", "4"))
        self.label5.setText(_translate("SentiAnotator140", "5"))
        self.sellLabel.setText(_translate("SentiAnotator140", "Sell"))
        self.finishButton.setText(_translate("SentiAnotator140", "Finish"))



class MainWindow(QDialog):
    def __init__(self):
        super(MainWindow, self).__init__()


        self.ui = Ui_SentiAnotator140()
        self.ui.setupUi(self)

        

        self.ui.tweetNumber.setValidator(QRegExpValidator(QRegExp(r"\d*\.\d+|\d+")))

        self.ui.displayButton.clicked.connect(self.displayButton_func)
        self.ui.previousButton.clicked.connect(self.previousButton_func)
        self.ui.nextButton.clicked.connect(self.nextButton_func)
        self.ui.buyLabel.clicked.connect(self.buyLabel_func)
        self.ui.sellLabel.clicked.connect(self.sellLabel_func)
        self.ui.label1.clicked.connect(self.label1_func)
        self.ui.label2.clicked.connect(self.label2_func)
        self.ui.label3.clicked.connect(self.label3_func)
        self.ui.label4.clicked.connect(self.label4_func)
        self.ui.label5.clicked.connect(self.label5_func)
        self.ui.finishButton.clicked.connect(self.finishButton_func)
        self.ui.enter.clicked.connect(self.enter_func)
        self.ui.Resetbutton.clicked.connect(self.Resetbutton_func)

        # self.ui.lineEdit.setText('./btc_emoticons.csv')
        # self.ui.lineEdit.setText('./forLabeling.csv')
        # self.ui.lineEdit.setText('./financialCat.csv')
        self.ui.lineEdit.setText('./Stock_Data - Copy.csv')




    def enter_func(self):
        global df

        if self.ui.lineEdit.text() != '':
            address = str(self.ui.lineEdit.text())
            address = address.replace(''''\'''', '/')
            try:
                # if address[-3:] == 'csv':
                if os.path.exists(address):
                    df = pd.read_csv(address)
                    df['Signal'] = 0	### to make script compatible
                    df['handySentiment'] = df['handySentiment'].astype(str)


                    self.ui.displayButton.setEnabled(True)
                    self.ui.previousButton.setEnabled(True)
                    self.ui.nextButton.setEnabled(True)
                    self.ui.buyLabel.setEnabled(True)
                    self.ui.sellLabel.setEnabled(True)
                    self.ui.label1.setEnabled(True)
                    self.ui.label2.setEnabled(True)
                    self.ui.label3.setEnabled(True)
                    self.ui.label4.setEnabled(True)
                    self.ui.label5.setEnabled(True)
                    self.ui.finishButton.setEnabled(True)
                    self.ui.Resetbutton.setEnabled(True)

                    self.ui.enter.setEnabled(False)
                    self.ui.lineEdit.setEnabled(False)
            except:
                pass

        else:
            pass


    def keyPressEvent(self, event):

        if event.key() == QtCore.Qt.Key_Escape:
        	print('last list was {}'.format(i))
        	df.to_csv(self.ui.lineEdit.text(), index=False)
        	sys.exit()

        if event.key() == QtCore.Qt.Key_1:
            df['handySentiment'].at[i] = 1
            self.ui.handySentiment.setText(str(df['handySentiment'].at[i]))

        if event.key() == QtCore.Qt.Key_2:
            df['handySentiment'].at[i] = 0
            self.ui.handySentiment.setText(str(df['handySentiment'].at[i]))

        if event.key() == QtCore.Qt.Key_3:
            df['handySentiment'].at[i] = 3
            self.ui.handySentiment.setText(str(df['handySentiment'].at[i]))

        if event.key() == QtCore.Qt.Key_4:
            df['Signal'].at[i] = 'None'
            self.ui.signalLabel.setText('None')
            df['handySentiment'].at[i] = 'None'
            self.ui.handySentiment.setText('None')

    def displayButton_func(self):
        global i, df
        if self.ui.tweetNumber.text() != '':
            i = int(self.ui.tweetNumber.text())
        else:
            i = 0
        self.ui.handySentiment.setText(str(df['handySentiment'].at[i]))
        self.ui.signalLabel.setText(str(df['Signal'].at[i]))
        self.ui.text.setText(df['tweet'].at[i])
        auto_sentiment = (tb(df['tweet'].at[i])).sentiment.polarity   ##### TextBlob #####
        if auto_sentiment>0:
        	self.ui.autoLabel.setText(f"<font color='green'>{str(round(auto_sentiment, 1))}</font>")
        else:
	        self.ui.autoLabel.setText(f"<font color='red'>{str(round(auto_sentiment, 1))}</font>")


        for emoji in happy_emoji:
            if emoji in df['tweet'].at[i]:
                print(emoji)
                self.ui.emoticon.setStyleSheet("background-color: green")
                pass
                

        for emoji in sad_emoji:
            if emoji in df['tweet'].at[i]:
                print(emoji)
                self.ui.emoticon.setStyleSheet("background-color: red")
                pass


    def previousButton_func(self):
        self.ui.emoticon.setStyleSheet("")

        global i, df
        if i > 0:
            i = i - 1
        else:
            i = 0
        self.ui.handySentiment.setText(str(df['handySentiment'].at[i]))
        self.ui.signalLabel.setText(str(df['Signal'].at[i]))
        self.ui.text.setText(df['tweet'].at[i])
        self.ui.tweetNumber.setText(str(i))
        auto_sentiment = (tb(df['tweet'].at[i])).sentiment.polarity   ##### TextBlob #####
        if auto_sentiment>0:
        	self.ui.autoLabel.setText(f"<font color='green'>{str(round(auto_sentiment, 1))}</font>")
        else:
	        self.ui.autoLabel.setText(f"<font color='red'>{str(round(auto_sentiment, 1))}</font>")


        for emoji in happy_emoji:
            if emoji in df['tweet'].at[i]:
                print(emoji)
                self.ui.emoticon.setStyleSheet("background-color: green")
                pass
                

        for emoji in sad_emoji:
            if emoji in df['tweet'].at[i]:
                print(emoji)
                self.ui.emoticon.setStyleSheet("background-color: red")
                pass


    def nextButton_func(self):
        self.ui.emoticon.setStyleSheet("")

        global i, df
        if i < len(df)-1:
            i = i + 1
        else:
            i = len(df)-1
        self.ui.handySentiment.setText(str(df['handySentiment'].at[i]))
        self.ui.signalLabel.setText(str(df['Signal'].at[i]))
        self.ui.text.setText(df['tweet'].at[i])
        self.ui.tweetNumber.setText(str(i))
        auto_sentiment = (tb(df['tweet'].at[i])).sentiment.polarity   ##### TextBlob #####
        if auto_sentiment>0:
        	self.ui.autoLabel.setText(f"<font color='green'>{str(round(auto_sentiment, 1))}</font>")
        else:
	        self.ui.autoLabel.setText(f"<font color='red'>{str(round(auto_sentiment, 1))}</font>")


        for emoji in happy_emoji:
            if emoji in df['tweet'].at[i]:
                print(emoji)
                self.ui.emoticon.setStyleSheet("background-color: green")
                pass
                

        for emoji in sad_emoji:
            if emoji in df['tweet'].at[i]:
                print(emoji)
                self.ui.emoticon.setStyleSheet("background-color: red")
                pass


    def buyLabel_func(self):
        df['Signal'].at[i] = 1
        self.ui.signalLabel.setText(str(df['Signal'].at[i]))

    def sellLabel_func(self):
        df['Signal'].at[i] = 'Sell'
        self.ui.signalLabel.setText(str(df['Signal'].at[i]))

    def label1_func(self):
        df['handySentiment'].at[i] = 1
        self.ui.handySentiment.setText(str(df['handySentiment'].at[i]))

    def label2_func(self):
        df['handySentiment'].at[i] = 2
        self.ui.handySentiment.setText(str(df['handySentiment'].at[i]))

    def label3_func(self):
        df['handySentiment'].at[i] = 3
        self.ui.handySentiment.setText(str(df['handySentiment'].at[i]))

    def label4_func(self):
        df['handySentiment'].at[i] = 4
        self.ui.handySentiment.setText(str(df['handySentiment'].at[i]))

    def label5_func(self):
        df['handySentiment'].at[i] = 5
        self.ui.handySentiment.setText(str(df['handySentiment'].at[i]))

    def finishButton_func(self):
        print('last list was {}'.format(i))
        df.to_csv(self.ui.lineEdit.text(), index=False)
        sys.exit()

    def Resetbutton_func(self):
    	df['Signal'].iloc[i] = 'None'
    	self.ui.signalLabel.setText('None')
    	df['handySentiment'].at[i] = 'None'
    	self.ui.handySentiment.setText('None')

QtWidgets.QApplication.setAttribute(QtCore.Qt.AA_EnableHighDpiScaling, True)  # enable highdpi scaling
QtWidgets.QApplication.setAttribute(QtCore.Qt.AA_UseHighDpiPixmaps, True)  # use highdpi icons

# main
app = QApplication(sys.argv)
mainwindow = MainWindow()
widget = QtWidgets.QStackedWidget()
widget.addWidget(mainwindow)
widget.setWindowTitle("textAnnotator140")
widget.setMinimumSize(550, 320)
widget.setMaximumSize(550, 320)
widget.show()
try:
    print('last list was {}'.format(i))
    sys.exit(app.exec_())

except:
    pass